1. 静态加载和动态加载
    静态加载：强依赖，在编译期间就进行加载检查，如果没有相关类则报错。
    动态加载：反射为动态加载，在执行运行时才加载。
2.类的加载时机
    创建对象new- 静态加载
    子类被加载时父类也被加载- 静态加载
    调用类中的静态成员- 静态加载
    通过反射动态加载- 动态加载
3.类加载过程
    加载：将字节码文件从不同的数据源转化为二进制字节流加载到内存中，并生成一个代表该类的Class对象。
    链接：
        验证：确保class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。
             包括：文件格式验证、元数据验证、字节码验证、符号引用验证。
        准备：jvm会在该阶段对静态变量，分配内存并默认初始化，这些变量所使用的内存都将在方法区中进行分配。
             非静态变量不会在准备阶段处理，静态常量在准备阶段直接赋值。
        解析：虚拟机将常量池内的符号引用替换为直接引用。
    初始化：真正执行java代码，此阶段执行<clinit>()方法，根据源文件中的编写顺序依次收集静态变量的赋值及静态代码块语句
           ，进行合并执行。虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确的加锁、同步，如果多个线程同时去初始化
           一个类，那么只能有一个类进行加载操作，其他的线程都需要阻塞等待，知道活动线程类加载完毕。